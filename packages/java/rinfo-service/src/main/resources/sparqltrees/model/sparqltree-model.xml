<st:sparqltree xmlns:st="http://oort.to/ns/2008/09/sparqltree"
               xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
               xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
               xmlns:owl="http://www.w3.org/2002/07/owl#"
               xmlns:xsd="http://www.w3.org/2001/XMLSchema#"
               xmlns:dct="http://purl.org/dc/terms/"
               xmlns:rpubl="http://rinfo.lagrummet.se/ns/2008/11/rinfo/publ#"
               xmlns:protege="http://protege.stanford.edu/plugins/owl/protege#"
               distinct="true">

    <ontology> a owl:Ontology .
        {
            OPTIONAL {
                ?ontology rdfs:label <ontoLabel/>
            }
            OPTIONAL {
                ?ontology rdfs:comment <ontoComment/>
            }

            OPTIONAL {
                ?ontology dct:title <title/>
            }
            OPTIONAL {
                ?ontology dct:description <description/>
            }

        } UNION {

            <!-- it seems we don't *need* nested UNION here, but I think it's clearer.. -->
            {
                ?class a owl:Class
            } UNION {
                ?class a owl:DeprecatedClass
            }
            <class> a <classType/>;
                rdfs:isDefinedBy ?ontology;
                rdfs:isDefinedBy <isDefinedBy/>;
                rdfs:label <label/> .
                OPTIONAL {
                    ?class rdfs:comment <comment/>
                }

                OPTIONAL {
                    ?class protege:abstract <abstract/>
                }

                OPTIONAL {
                    ?class rdfs:subClassOf <subClassOf/> .
                    FILTER(isURI(?subClassOf))
                }

                OPTIONAL {
                    ?class rdfs:subClassOf ?restriction .
                    <restriction> a owl:Restriction;
                        owl:onProperty <onProperty/> .
                        OPTIONAL {
                            ?restriction owl:allValuesFrom <allValuesFrom/>
                        }
                        OPTIONAL {
                            ?restriction owl:someValuesFrom <someValuesFrom/>
                        }
                        OPTIONAL {
                            ?restriction owl:cardinality <cardinality/>
                        }
                        OPTIONAL {
                            ?restriction owl:minCardinality <minCardinality/>
                        }
                        OPTIONAL {
                            ?restriction owl:maxCardinality <maxCardinality/>
                        }
                    </restriction>
                }
            </class>

        } UNION {

            {
                ?property a rdf:Property
            } UNION {
                ?property a owl:ObjectProperty
            } UNION {
                ?property a owl:DatatypeProperty
            } UNION {
                ?property a owl:FunctionalProperty
            }

            <property> a <propertyType/>;
                rdfs:isDefinedBy ?ontology;
                rdfs:label <label/> .
                OPTIONAL {
                    ?property rdfs:comment <comment/> .
                }
                OPTIONAL {
                    ?property rdfs:subPropertyOf <subPropertyOf/>;
                }
                OPTIONAL {
                    <hasSubProperty/> rdfs:subPropertyOf ?property;
                }
                OPTIONAL {
                    ?property rdfs:domain <domain/>
                }
                OPTIONAL {
                    ?property rdfs:range <range/>
                }
                OPTIONAL {
                    ?property owl:inverseOf <inverseOf/>
                }
                OPTIONAL {
                    ?property protege:abstract <abstract/>
                }

            </property>

        <!-- TODO: how to get only props (and classes) *referenced* via
                ontology defined things (w/o getting *all* in the repo)?

        } UNION {

            # * for each class above,
            #   select labels for each subClassOf or range, or allValuesFrom/someValuesFrom
            #   where isDefinedBy != ?ontology
            # * for each property above, select labels for each subPropertyOf or onProperty
            #   where isDefinedBy != ?ontology

            {
                [
                    rdfs:isDefinedBy ?ontology
                ] rdfs:subClassOf ?baseClass .
            } UNION {
                [
                    rdfs:isDefinedBy ?ontology
                ] rdfs:range ?baseClass .
            }

            ?baseClass rdfs:label ?label .
            OPTIONAL {
                ?baseClass rdfs:comment ?comment
            }

        -->
        } UNION {

            ?someProperty rdfs:range ?class .
            ?class rdfs:isDefinedBy ?isDefinedBy;
                rdfs:label ?label .
            OPTIONAL {
                ?class rdfs:comment ?comment .
            }
            FILTER(?isDefinedBy != ?ontology)

        } UNION {

            ?property a rdf:Property;
                rdfs:isDefinedBy ?isDefinedBy;
                rdfs:label ?label .
            OPTIONAL {
                ?property rdfs:comment ?comment .
            }
            FILTER(?isDefinedBy != ?ontology)

        }

    </ontology>
    FILTER( ?ontology = rpubl: ) .
    <!--
    -->

</st:sparqltree>
