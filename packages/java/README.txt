########################################################################
README - Java Packages
########################################################################

Overview
========================================================================

These packages implement the rinfo content collection, supply and basic
services.

Core libraries:

* rinfo-store/README.txt
* rinfo-collector/README.txt
* rinfo-base/README.txt
* rinfo-rdf-repo/README.txt
* rinfo-sesame-http/README.txt

RInfo applications:

* rinfo-main/README.txt
* rinfo-service/README.txt

Test application for serving demo data:

* demodata-supply/README.txt


Setup
========================================================================

In the directory of this README, run::

    $ mvn install

If the tests fail for some reason, fix that! Still it *is* possible to do::

    $ mvn install -Dmaven.test.skip=true

if you *need* to (for some specific development/debug purpose).


Environments
========================================================================

Study how the use of ``${environment}`` in the ``pom.xml`` is used to copy
environment-specific resources to the target for packaging. This should *not*
be used by shared library packages, only final applications!

Basic usage within application sub-packages::

    # Use inferred environment (default or e.g. by OS):
    $ mvn <...>
    # Use config in src/environments/prod/:
    $ mvn -Pprod <...>

The source code repository has been configured to ignore an environment named
"local". You can thus create such a directory for local, non-versioned
configurations. (This is useful to experiment without worrying about
accidentally committing odd settings.) Example::

    $ mkdir src/environments/local/
    $ cp src/environments/dev-unix/*.properties src/environments/local/
    $ mvn -Plocal <...>

Maven Usage
========================================================================

Testing
-------

The commands should be run in the directory where the pom.xml resides for a
module or application.::

    # Run all tests:
    $ mvn clean test
    # Run one test:
    $ mvn test -Dtest=se.lagrummet.rinfo.store.depot.FileDepotWriteTest
    # Run tests by pattern matching:
    $ mvn test -Dtest=FileDepot*Test

Code coverage from tests::

    $ mvn cobertura:cobertura


Logging
-------

This project uses the logging API SLF4J since it allows various logging
mechanisms such as Java util logging (JUL), Java Commons Logging (JCL) and
Log4j to be funneled together and output using one logging implementation.
The logging implementation used is Logback which has very few dependencies
and is supposed to be fast.

Log configuration comes in three flavors: main (for applications), test
(for tests) and dev (for running the applications directly in the shell).
The logfiles are put in the log-config directory and are required using the
resources element in pom files that need them.

When run in a servlet container every webapp produces logging in two files:
a normal log file and an access log file. The only output that ends up in
other files are output to stdout and stderr and uncaught Exceptions thrown
in spawned threads.


Site
----

Some useful reports (coverage, findbugs etc.) can be generated by:

    $ mvn site

Important: this will likely lead to a memory error (heap space) unless you define:

    $ export MAVEN_OPTS=-Xmx384M


Running classes directly
------------------------

::

    # .. in rinfo-store/
    $ mvn exec:java -Dexec.mainClass=se.lagrummet.rinfo.store.depot.FileDepotCmdTool -Dexec.args="<path-to-depot.properties> index"

    # .. in rinfo-store/
    $ mvn exec:java -Dexec.mainClass=se.lagrummet.rinfo.store.supply.SupplyApplication -Dexec.args="8182 [opt. path to depot-config-props]"

