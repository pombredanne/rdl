########################################################################
Running the RInfo System Locally
########################################################################


Getting Started
========================================================================

It's recommended to run all components of the RInfo System on your local
machine during development. To do this from scratch, you need:

* Java JDK 1.6+ - <http://java.sun.com/javase/downloads/widget/jdk6.jsp>
* Maven 3+ - <http://maven.apache.org/>
* Tomcat 6+ - <http://tomcat.apache.org/>

To use the various instrumental tools used you also need:

* Groovy 2.0+ - <http://groovy.codehaus.org/Download>

* Python 2.7+ - <http://www.python.org/download/>

  - For management (such as deployment): see ``README.txt``.
  - For acceptance spec testing: see ``../documentation/spec/README.txt``
    (NOTE: these are peripheral right now, so you can skip this part).


Setting up the environment
========================================================================

Data directories
------------------------------------------------------------------------

These directories must exist and be writable by the user used to run
maven and groovy. At start, they should be empty.

* /opt/work/rinfo/
* /opt/work/rinfo/depots/rinfo/


Sesame
------------------------------------------------------------------------

You need a Java webapp container (e.g. Tomcat) to run the Sesame RDF
Repository server (aka openrdf-sesame). This server is expected to run
at ``http://localhost:8080/openrdf-sesame/``.

To build the sesame packages::

  $ cd packages/java/rinfo-sesame-http/
  $ mvn package

Then copy ``openrdf-sesame.war`` and (optionally)
``sesame-workbench.war`` found in ``target/dependency`` to the
container (e.g. ``$TOMCAT_HOME/webapps``).

On a linux system, unless you have configured anything else,
$TOMCAT_HOME is probably set to /var/lib/tomcat6/

Note: Tomcat is not really needed when running the services
standalone. See below under rinfo-service for an alternative way of
running the openrdf-sesame through through mvn and jetty.


ElasticSearch
------------------------------------------------------------------------

Download and install ElasticSearch by following the instructions at
<http://www.elasticsearch.org/>.

(For the time being, you need version 0.90.11, there are still some
adjustments needed before RDL can support version 1.0.0+, see
https://github.com/rinfo/rdl/issues/87 for more details)

Start an instance by running the ``elasticsearch`` command (commonly in the bin
directory of the installation)::

    $ elasticsearch -f

You can configure the location of log and data directories by creating an
``elasticsearch.yml`` file and adding something like this (choose paths to your
liking)::

    cluster:
        name: elasticsearch

    path:
        logs: /opt/work/rinfo/elasticsearch/log
        data: /opt/work/rinfo/elasticsearch/data

And run with (choose the config file location to your liking)::

    $ elasticsearch -f -D es.config=/opt/work/rinfo/elasticsearch/elasticsearch.yml


Varnish
------------------------------------------------------------------------

Download and install Varnish. For the time being you need version 3.0.5,
see https://www.varnish-cache.org/releases/varnish-cache-3.0.5.
(For Mac OS X, varnish can be installed with homebrew)

Create the following directories that will be used by varnish at runtime:

* /opt/work/rinfo/varnish/
* /opt/work/rinfo/varnish/cache/

Go to the recently created varnish directory and fetch the latest
varnish configuration files (VCL) for the dev-unix environment.

	$ cd /opt/work/rinfo/varnish/
	$ wget https://raw.githubusercontent.com/rinfo/rdl/develop/manage/sysconf/common/varnish/rinfo-service.vcl
	$ wget https://raw.githubusercontent.com/rinfo/rdl/develop/manage/sysconf/dev-unix/varnish/backend.vcl
	$ wget https://raw.githubusercontent.com/rinfo/rdl/develop/manage/sysconf/dev-unix/varnish/host.vcl

A brief description of the VCL files above:

* rinfo-service.vcl: common configuration for PURGE/BAN logic, cache ttl, etc.
* backend.vcl: environment specific backend setting, included by rinfo-service.vcl
* host.vcl: environment specific host setting (if virtualhost is used), included by rinfo-service.vcl

Start up varnishd on localhost port 8383. (Notice the "vcl_dir" parameter that allows
backend.vcl and host.vcl to be relatively referenced by rinfo-service.vcl):

	$ sudo varnishd -a 127.0.0.1:8383 -T 127.0.0.1:6082 -s file,/opt/work/rinfo/varnish/cache,1G -p vcl_dir=/opt/work/rinfo/varnish/ -f /opt/work/rinfo/varnish/rinfo-service.vcl

To actually make use of varnish, your local installation of lagrummet.se
should be configured to route rinfo-service requests through localhost:8383.
Ensure that your local 'lagrummet.se-config.groovy' file has this key/value:

	lagrummet.rdl.service.baseurl="http://127.0.0.1:8383/"

To stop varnishd:

	$ sudo pkill varnishd

A few examples of manually invalidating the varnish cache with purge or ban.
(See also: /rdl/java/rinfo-service/src/main/groovy/se/lagrummet/rinfo/service/VarnishInvalidator.groovy)

	# To remove a specific object, use purge:
	$ curl -X PURGE 127.0.0.1:8383/publ/sfs/1999:175/data
	$ curl -X PURGE 127.0.0.1:8383/publ/sfs/1999:175/konsolidering/2011-05-02/data

	# To remove many objects matching a regex, use ban:
	$ curl -X BAN 127.0.0.1:8383/publ/sfs/1999:175/		# includes both purge examples above
	$ curl -X BAN 127.0.0.1:8383/publ/sfs/						# all SFS data
	$ curl -X BAN 127.0.0.1:8383/konsolidering				# all consolidated data
	$ curl -X BAN 127.0.0.1:8383/2011-05-02						# all data matching this date


The RInfo Applications
------------------------------------------------------------------------

To run tools for building admin data and documentation, you need to configure
your local environment for them. See:

  - ``../tools/README.txt``

For details on setting this up.

Install the shared rinfo packages to your local maven repo by::

  $ cd packages/java
  $ mvn install

(``mvn install`` also runs all regression tests. If these fail for
some reason, the install process will not continue. See
packages/java/README.txt for hints on how to proceeed).

Now you are ready to start up:

* Create and serve integration test data:

  These steps will result in a web service that offers a feed of base
  data resources (RDF ontologies, basic RDF descriptions of shared
  resources such as organizations, and a list of other feeds that
  contain document and metadata) know as "the admin feed".

  In addition, the same web service offers (in separate feeds) some
  example data (PDF documents and RDF metadata about them).

  The web service is simply a small web server that serves static
  files from a particular directory.

  These can be created and served by the following steps::

    $ cd tools/rinfomain/
    $ ./map_feeds_and_base.sh

  Under hood, the ``map_feeds_and_base.sh`` script runs two groovy scripts with
  some present parameters for destination file paths.

  map_feeds_docs.groovy

    This creates a number of atom feed files, RDF files and document files (in
    PDF) under ``/opt/work/rinfo/testsources/www``. These are created from
    example files present in ``../../documentation``

  base_as_feed.groovy

    This creates files for the admin feed from the resources found in
    ``../../resources/base`` and the content feeds that now are present in
    ``/opt/work/rinfo/testsources/www``. The admin feed files are likewise
    created in ``/opt/work/rinfo/testsources/www``.

  Once these files are created, serve these using:

    $ groovy serve_folder.groovy

  This serves up the directory ``/opt/work/rinfo/testsources/www``
  Go to <http://localhost:8280/feed/current> to verify that it contains a
  valid feed. This contains the admin feed for the main application and
  a couple of test sources that the previous steps created.

  (These three scripts all take assorted command line flags if you
  wish to read resources and examples from other paths, or if you want
  to create the resulting files somewhere else. Read the source for
  details.)

* Start local instance of the RInfo system:

  rinfo-main

      Collects from the sources defined for development mode (a
      base/admin prototype feed and example suppliers) and supplies
      the main data feed. In order to do anything useful, rinfo-main
      needs a web service that contains the admin feed. The address of
      the admin feed is contained in the applications properties file,
      (normally ``src/environments/dev-unix/rinfo-main.properties``),
      see the property ``rinfo.main.collector.adminFeedUrl``.
      
      Go to the application package and run it::

        $ cd packages/java/rinfo-main/
        $ mvn jetty:run

      By default the profile (and thus environment settings) will set to one of
      the "dev-*" profiles. (See ``../packages/java/README.txt`` for details
      about environments.)

      In this mode, the application runs with scheduled collections turned
      *off*. To populate rinfo-main with data you must trigger collects
      manually::

        # Collect the admin feed
        curl -d 'feed=http://localhost:8280/feed/current' http://localhost:8180/collector

        # Collect the sources as pointed out in the admin feed
        curl -d 'feed=http://localhost:8280/arbetsformedlingen.se/current.atom' http://localhost:8180/collector
        curl -d 'feed=http://localhost:8280/boverket.se/current.atom' http://localhost:8180/collector
        curl -d 'feed=http://localhost:8280/jordbruksverket.se/current.atom' http://localhost:8180/collector
        curl -d 'feed=http://localhost:8280/slv.se/current.atom' http://localhost:8180/collector
        curl -d 'feed=http://localhost:8280/regeringen.se/current.atom' http://localhost:8180/collector
        curl -d 'feed=http://localhost:8280/komdir.regeringen.se/current.atom' http://localhost:8180/collector
        curl -d 'feed=http://localhost:8280/riksarkivet.se/current.atom' http://localhost:8180/collector
        curl -d 'feed=http://localhost:8280/verva.se/current.atom' http://localhost:8180/collector

      If you wish to automate this, the best way to enable scheduled
      collections is to create a local environment::

        $ mkdir src/environments/local/
        $ cp src/environments/dev-unix/*.properties src/environments/local/

      Edit ``rinfo-main.properties`` and make sure that the scheduleInterval is
      larger than -1, like this (for collecting every 60th second)::

        rinfo.main.collector.scheduleInterval=60

      Then run::

        $ mvn jetty:run -Plocal

      Verify that rinfo-main is up and running by going to
      http://localhost:8180/feed/current which should contain a valid
      feed. You can also verify that data has been collected by
      looking in the directories under
      ``/opt/work/rinfo/depots/rinfo/depot/``, particularly ``publ``
      and ``feed``.

      Additional information can be found in:
      ``../packages/java/rinfo-main/README.txt``.

  rinfo-service

      Collects data from rinfo-main into the sesame RDF repo, making
      data available for its data views. In order to run rinfo-service
      you need to first have a running sesame server started. This can
      be done either by running openrdf-sesame in a Tomcat server, as
      described above, or by running running "mvn jetty:run-war" in
      the rinfo-sesame-http directory. After that you can start
      rinfo-service by running "mvn jetty:run" from the rinfo-service
      directory.

      You also need to have elasticsearch running. See instructions
      above.
      
      To populate rinfo-service with data you must trigger a collect of
      rinfo-main::

        $ curl -d 'feed=http://localhost:8180/feed/current' http://localhost:8181/collector

      (If you have a local setting for enabled scheduled collects, as described
      above, you can instead also add the following in your
      ``rinfo-main.properties``::

        rinfo.main.collector.onCompletePingTargets=http://localhost:8181/collector

      This will have main automatically ping service instead.)

      Verify that rinfo-service is up and running by going to
      http://localhost:8181/ui/ where you should be able to search and navigate
      using the service REST API.

      Additional information can be found in:
      ``../packages/java/rinfo-service/README.txt``.


Starting out clean
========================================================================

[How to wipe rinfo-main, elasticsearch and sesame]

1. rinfo-main: rm -r /opt/work/rinfo/depots/rinfo


Adding source feeds
========================================================================

[How to add a source feed to the admin feed, and collect it]

1. Edit /opt/work/rinfo/testsources/www/sys/sources/rdf.rdf 


In Depth
========================================================================

To get an *understanding* of how a staging or production environment is set up,
you can study the deployment script in ``fabfile.py`` and the scripts it
includes to provide setup and deployment commands.

